#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import io
import re
import json
from os import path, listdir, remove, sep
from indexer import Thumbs, Item, Util, Folder

class Posts:
    @staticmethod
    def write_post(item, base_dir, thumbs_dir, posts_dir, remote):
        if item.date == None:
            print("  warning: Date missing, using 1984-04-25 on", item.path_full)
            item.date = "1984-04-25"
        if item.cover == None:
            print("  warning: Cover missing, skypping", item.path_full)
            return

        out = io.StringIO()
        out.write("---\nlayout: post\n")
        out.write("title: " + item.title + '\n')
        out.write("image: " + remote + base_dir + "/" + item.hook + "/" + item.cover + "\n")
        out.write("optimized_image: " + remote + Thumbs.get_thumb(thumbs_dir, item) + "\n")
        if item.subtitle != None:
            out.write("subtitle: " + item.subtitle + "\n")
            out.write("description: " + item.subtitle + "\n")
        if item.category != None:
            out.write("category: " + item.category + "\n")
        if len(item.tags) > 0:
            out.write("tags:\n")
            for t in item.tags:
                out.write("  - " + t + "\n")
        if item.author != None:
            out.write("author: " + item.author + "\n")
        out.write("---\n")
        warning_msg = ("<!-- DON'T EDIT THIS FILE, GENERATED BY SCRIPT -->\n") * 5
        out.write(warning_msg)
        out.write(item.content)
        text = out.getvalue()

        regex = r"!\[(.*?)\]\(([^:]*?)\)"
        text = re.sub(regex, "", text, 1, re.MULTILINE) #removendo capa
        subst = "![\\1](" + remote + item.dir_full + sep + "\\2)"
        text = re.sub(regex, subst, text, 0, re.MULTILINE)

        name = item.date + "-" + Util.get_md_link(item.category) + "-" + Util.get_md_link(item.title) + "-@" + item.hook
        with open(posts_dir + sep + name +  ".md", "w") as f:
            f.write(text)

    @staticmethod
    def remove_old_posts(item, posts_dir):
        files = listdir(posts_dir)
        files = [path.join(posts_dir, x) for x in files]
        files = [x for x in files if path.isfile(x)]
        for file in files:
            if file.endswith("-@" + item.hook):
                if path.getmtime(item.path) > path.getmtime(file):
                    print("  replacing post", file, "with new content'")
                    remove(file)

    @staticmethod
    def generate_posts(itens, base_dir, thumbs_dir, posts_dir, remote):
        for item in itens:
            Posts.remove_old_posts(item, posts_dir)
            Posts.write_post(item, base_dir, thumbs_dir, posts_dir, remote)


with open(".bake_posts.json") as f:
    cfg = json.load(f)


base_full = path.normpath(path.join(cfg["root"], cfg["base"]))
if not path.isdir(base_full):
    print("error, base not found")
    exit(1)
thumbs_dir = path.normpath(path.join(cfg["root"], cfg["thumbs"]))
if not path.isdir(thumbs_dir):
    print("error, thumbs not found")
    exit(1)

if not path.isdir(cfg["posts"]):
    print("error, posts not found")
    exit(1)


itens = Folder.parse_itens(cfg["symbols"], base_full)
print("\n".join([str(x) for x in itens]))
Posts.generate_posts(itens, cfg["base"], cfg["thumbs"], cfg["posts"], cfg["remote"])